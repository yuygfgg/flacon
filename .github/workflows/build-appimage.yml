name: Build AppImage

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LANG: en_US.UTF-8
  LS_ALL: en_US.UTF-8
  LANGUAGE: en_US:en
  PROGRAMS: alacenc faac flac lame mac oggenc opusenc sox ttaenc wavpack wvunpack

jobs:
  build_appimage:
    strategy:
      matrix:
        arch: [arm64]
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set env
      run: |
        export ARCH=${{matrix.arch}}
        echo "RELEASE_DATE=$(date +%Y.%m.%d_%H.%M.%S)" >> ${GITHUB_ENV}
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}"   >> ${GITHUB_ENV}
        echo "ARCH=${{ matrix.arch }}"                 >> ${GITHUB_ENV}
        echo "APP_DIR=${HOME}/APP"                     >> ${GITHUB_ENV}

        [[ "${GITHUB_REF_TYPE}"  = "tag" ]] && echo APPIMAGE_NAME="flacon-${GITHUB_REF_NAME:1}-x86_64.AppImage" >> $GITHUB_ENV
        [[ "${GITHUB_REF_TYPE}" != "tag" ]] && echo APPIMAGE_NAME="flacon-$(date +%Y.%m.%d_%H.%M.%S)-x86_64.AppImage" >> $GITHUB_ENV

        cat /etc/lsb-release >> ${GITHUB_ENV}
        dpkg-architecture -A ${{ matrix.arch }} --list >> ${GITHUB_ENV}

        echo "==============================="
        export
        echo "-------------------------------"
        cat $GITHUB_ENV
        echo "==============================="


    - name: Prepare
      run: |
        id
        ls -l /etc/apt
        echo "==============================="
        cat /etc/apt/sources.list
        echo "==============================="
        sudo sed  -e "s|^deb |deb [arch=amd64] |" -i /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME} main restricted" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME}-updates main restricted" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME} universe" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME}-updates universe" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME} multiverse" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME}-updates multiverse" >> /etc/apt/sources.list
        echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ ${DISTRIB_CODENAME}-backports main restricted universe multiverse" >> /etc/apt/sources.list

        echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
        sudo dpkg --add-architecture ${ARCH}


        echo "Installing packages ***********************************"
        sudo apt-get -y update > /dev/null
        sudo apt-get -y --no-install-recommends install locales  > /dev/null
        sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

        sudo apt-get -y --no-install-recommends install gcc-${DEB_TARGET_GNU_TYPE} g++-${DEB_TARGET_GNU_TYPE} pkg-config cmake git jq
        sudo apt-get -y --no-install-recommends install qtbase5-dev:${ARCH} qttools5-dev-tools:${ARCH} qttools5-dev:${ARCH} libuchardet-dev:${ARCH} libtag1-dev:${ARCH}


        echo "Create toolchain file ***********************************"
        echo "" > ${HOME}/toolchain.cmake
        echo "set(TOLLCHAIN_DIR /usr)"                                                                                                    >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_SYSTEM_NAME Linux)"                                                                                               >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_SYSTEM_PROCESSOR $DEB_TARGET_GNU_CPU)"                                                                            >> ${HOME}/toolchain.cmake

        echo "set(CMAKE_C_COMPILER   "${TOLLCHAIN_DIR}/bin/${DEB_TARGET_GNU_TYPE}-gcc")"                                                  >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_CXX_COMPILER "${TOLLCHAIN_DIR}/bin/${DEB_TARGET_GNU_TYPE}-g++")"                                                  >> ${HOME}/toolchain.cmake

        echo "set(CMAKE_FIND_ROOT_PATH "/usr/${DEB_TARGET_GNU_TYPE}" "/usr/lib/${DEB_TARGET_GNU_TYPE}")"                                  >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_PREFIX_PATH "/usr/lib/${DEB_TARGET_GNU_TYPE}/cmake" "/usr/lib/${DEB_TARGET_GNU_TYPE}/pkgconfig")"                 >> ${HOME}/toolchain.cmake

        echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)"                                                                                >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)"                                                                                >> ${HOME}/toolchain.cmake

        echo "set(PKG_CONFIG_EXECUTABLE "${TOLLCHAIN_DIR}/bin/${DEB_TARGET_GNU_TYPE}-pkg-config" CACHE FILEPATH "pkg-config executable")" >> ${HOME}/toolchain.cmake
        cat ${HOME}/toolchain.cmake



    # ===========================================

    - name: Build alacenc
      run: |

        mkdir ${HOME}/alacenc && cd ${HOME}/alacenc

        export URL=$(curl -s -L  'https://api.github.com/repos/flacon/alacenc/releases/latest' | jq -r '.tarball_url')
        echo $URL
        curl -s -L "$URL" > sources.tgz
        mkdir -p sources
        tar -xf sources.tgz --directory sources --strip-components=1

        cmake -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain.cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${APP_DIR}/usr sources
        make -Cbuild -j4
        install -D build/alacenc ${APP_DIR}/usr/alacenc



        echo "= ${APP_DIR} ======================"
        ls ${APP_DIR}
        echo "-----------------------------------"
        ls ${APP_DIR}/usr
        echo "==================================="



    #     sudo apt-get -y install software-properties-common
    #     sudo add-apt-repository -y ppa:flacon
    #     sudo apt-get -y update
    #     sudo apt-get -y install build-essential pkg-config cmake  qtbase5-dev qttools5-dev-tools qttools5-dev libuchardet-dev libtag1-dev
    #     sudo apt-get -y install flac mac alacenc vorbis-tools wavpack lame ttaenc faac opus-tools sox

    # - name: Clone tools
    #   run: |
    #     git clone --depth 1 https://github.com/SokoloffA/nightly-tools.git ~/tools
    #     echo PATH=~/tools/appimage/usr/bin:$PATH >> $GITHUB_ENV
    #     echo LD_LIBRARY_PATH=~/tools/appimage/usr/lib >> $GITHUB_ENV

    # - name: Create Build Environment
    #   run: |
    #     cmake -E make_directory ${{github.workspace}}/build
    #     cmake -E make_directory ${{github.workspace}}/build/app

    # - name: Run CMake
    #   shell: bash
    #   working-directory: ${{github.workspace}}/build
    #   run: cmake -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/app/usr -DAPPIMAGE_BUNDLE=Yes -DCMAKE_BUILD_TYPE=$BUILD_TYPE $GITHUB_WORKSPACE

    # - name: Build Flacon
    #   working-directory: ${{github.workspace}}/build
    #   shell: bash
    #   run: make -j 8

    # - name: Install Flacon
    #   working-directory: ${{github.workspace}}/build
    #   shell: bash
    #   run: make install

    # - name: Build AppImage dir
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     echo "==============================="
    #     export PATH=~/tools/appimage/usr/bin:$PATH
    #     export LD_LIBRARY_PATH=~/tools/appimage/usr/lib
    #     echo "= Create symlinks ============="
    #     ln -sf usr/bin/flacon AppRun
    #     ln -sf usr/share/icons/hicolor/128x128/apps/flacon.png .
    #     ln -sf usr/share/applications/flacon.desktop .
    #     echo "= Add programs ================"
    #     for prog in ${PROGRAMS}; do echo " * Copy ${prog}"; src=$(which "$prog"); dest=${src#/}; cp -f "${src}" "usr/bin/"; done
    #     echo "= Build image ================="
    #     linuxdeploy --verbosity=3  --plugin qt --appdir "${{github.workspace}}/build/app"

    # - name: Check external programs
    #   working-directory: ${{github.workspace}}
    #   run: |
    #     scripts/check-extprograms.sh . ${{github.workspace}}/build/app/usr/bin

    # - name: Build AppImage file
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     appimagetool "${{github.workspace}}/build/app" "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"


    # - name: Upload artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.APPIMAGE_NAME }}
    #     path: "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"
