name: Build AppImage

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LANG: en_US.UTF-8
  LS_ALL: en_US.UTF-8
  LANGUAGE: en_US:en
  PROGRAMS: alacenc faac flac lame mac oggenc opusenc sox ttaenc wavpack wvunpack
  MAC_URL: https://monkeysaudio.com/files/MAC_1027_SDK.zip

jobs:
  build_appimage:
    strategy:
      matrix:
        arch: [arm64]
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v3

    - name: Set env
      run: |
        export ARCH=${{matrix.arch}}
        echo "RELEASE_DATE=$(date +%Y.%m.%d_%H.%M.%S)" >> ${GITHUB_ENV}
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}"   >> ${GITHUB_ENV}
        echo "ARCH=${{ matrix.arch }}"                 >> ${GITHUB_ENV}
        echo "APP_DIR=${HOME}/APP"                     >> ${GITHUB_ENV}

        [[ "${GITHUB_REF_TYPE}"  = "tag" ]] && echo APPIMAGE_NAME="flacon-${GITHUB_REF_NAME:1}-x86_64.AppImage" >> $GITHUB_ENV
        [[ "${GITHUB_REF_TYPE}" != "tag" ]] && echo APPIMAGE_NAME="flacon-$(date +%Y.%m.%d_%H.%M.%S)-x86_64.AppImage" >> $GITHUB_ENV

        source /etc/lsb-release
        cat /etc/lsb-release >> ${GITHUB_ENV}
        dpkg-architecture -A ${{ matrix.arch }} --list >> ${GITHUB_ENV}

        echo "==============================="
        export
        echo "-------------------------------"
        cat $GITHUB_ENV
        echo "==============================="


    - name: Prepare
      run: |
        sudo echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
        sudo dpkg --add-architecture ${{matrix.arch}}
        sudo sed -i'' -E 's/^(deb|deb-src) /\1 [arch=amd64,i386] /' /etc/apt/sources.list

        echo "# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" | sudo tee -a /etc/apt/sources.list
        echo "deb [arch=${{matrix.arch}}] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted universe" | sudo tee -a /etc/apt/sources.list
        echo "deb [arch=${{matrix.arch}}] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted universe" | sudo tee -a /etc/apt/sources.list
        echo "deb [arch=${{matrix.arch}}] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security main restricted universe" | sudo tee -a /etc/apt/sources.list

        sudo apt-get -y update > /dev/null

    - name: Installing packages
      run: |
        sudo apt-get -y --no-install-recommends install locales > /dev/null
        sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

        echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        apt list --installed
        echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"

        sudo apt -y remove \
          nginx \
          mono-runtime-common \
          default-jre-headless \
          java8-runtime-headless \
          ant

        echo "±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±"
        sudo aptitude -y install qtbase5-dev:${ARCH}
        echo "±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±"


        sudo apt-get -y install \
          gcc-${DEB_TARGET_GNU_TYPE} \
          g++-${DEB_TARGET_GNU_TYPE} \
          pkg-config \
          dpkg-dev \
          cross-config \
          cmake \
          git \
          jq \
          aptitude

        echo "±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±"
        sudo aptitude -y install qtbase5-dev:${ARCH}
        echo "±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±"


        sudo apt-get -y -f install \
          qtbase5-dev:${ARCH} \
          qttools5-dev-tools:${ARCH} \
          qttools5-dev:${ARCH} \
          libuchardet-dev:${ARCH} \
          libtag1-dev:${ARCH} \
          zlib1g-dev:${ARCH}

        echo "============================"
        ls /usr/lib/aarch64-linux-gnu
        echo "============================"
        find /usr/lib
        echo "============================"

    - name: Create toolchain file
      run: |
        echo ""                                                                                                          > ${HOME}/toolchain.cmake
        echo "set(TOLLCHAIN_DIR /usr)"                                                                                  >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_SYSTEM_NAME Linux)"                                                                             >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_SYSTEM_PROCESSOR $DEB_TARGET_GNU_CPU)"                                                          >> ${HOME}/toolchain.cmake

        echo "set(CMAKE_C_COMPILER   \${TOLLCHAIN_DIR}/bin/${DEB_TARGET_GNU_TYPE}-gcc)"                                 >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_CXX_COMPILER \${TOLLCHAIN_DIR}/bin/${DEB_TARGET_GNU_TYPE}-g++)"                                 >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_SYSROOT /)"                                                                                     >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_FIND_ROOT_PATH /usr/${DEB_TARGET_GNU_TYPE} /usr/lib/${DEB_TARGET_GNU_TYPE})"                    >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_PREFIX_PATH /usr/lib/${DEB_TARGET_GNU_TYPE}/cmake /usr/lib/${DEB_TARGET_GNU_TYPE}/pkgconfig)"   >> ${HOME}/toolchain.cmake

        echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)"                                                              >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)"                                                              >> ${HOME}/toolchain.cmake
        echo "set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)"                                                              >> ${HOME}/toolchain.cmake

        echo "set(PKG_CONFIG_EXECUTABLE /bin/aarch64-linux-gnu-pkg-config)"                                             >> ${HOME}/toolchain.cmake

        echo "== TOOLCHAIN FILE ========================================================================================"
        cat ${HOME}/toolchain.cmake



    # ===========================================
    - name: Build alacenc
      run: |

        mkdir ${HOME}/alacenc && cd ${HOME}/alacenc

        export URL=$(curl -s -L  'https://api.github.com/repos/flacon/alacenc/releases/latest' | jq -r '.tarball_url')
        echo "Download $URL"
        curl -s -L "$URL" > sources.tgz
        tar -xf sources.tgz --strip-components=1

        cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain.cmake -DCMAKE_INSTALL_PREFIX=${APP_DIR}/usr .
        make  -Cbuild -j4
        cmake --install build --prefix "${APP_DIR}"


    # ===========================================
    - name: Build ttaenc
      run: |

        mkdir ${HOME}/ttaenc && cd ${HOME}/ttaenc

        export URL=$(curl -s -L  'https://api.github.com/repos/flacon/flacon.third-party/releases/latest' | jq -r '.tarball_url')
        echo "Download $URL"
        curl -s -L "$URL" > sources.tgz
        tar -xf sources.tgz --strip-components=1
        cd ttaenc/ttaenc-3.4.1

        echo 'project(ttaenc LANGUAGES C)'  >> CMakeLists.txt
        echo 'set(CMAKE_C_FLAGS "-Wall -O3 -fomit-frame-pointer -funroll-loops -fforce-addr -falign-functions=4")'  >> CMakeLists.txt
        echo 'if ( ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )'  >> CMakeLists.txt
        echo '  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse")'  >> CMakeLists.txt
        echo 'endif()'  >> CMakeLists.txt
        echo 'add_executable(ttaenc ttaenc.h ttaenc.c)'  >> CMakeLists.txt
        echo 'install(TARGETS ttaenc RUNTIME DESTINATION bin)'  >> CMakeLists.txt

        echo "===================================================="
        cat CMakeLists.txt
        echo "===================================================="

        cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain.cmake .
        make  -Cbuild -j4
        cmake --install build --prefix "${APP_DIR}"


    # ===========================================
    - name: Build mac
      run: |

        mkdir ${HOME}/mac && cd ${HOME}/mac

        curl -s -L "$MAC_URL" > sources.zip
        unzip sources.zip

        cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain.cmake .
        make  -Cbuild -j4
        cmake --install build --prefix "${APP_DIR}"


    # ===========================================
    - name: Build flacon
      run: |
        mkdir ${HOME}/flacon && cd ${HOME}/flacon

        cmake -Bbuild -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain.cmake -DAPPIMAGE_BUNDLE=Yes -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${GITHUB_WORKSPACE}
        make  -Cbuild -j8
        cmake --install build --prefix "${APP_DIR}"


    # ===========================================
    - name: CHECK
      run: |
        echo "= ${APP_DIR} ======================"
        find ${APP_DIR}
        echo "==================================="


    # ===========================================
    - name: Build AppImage dir
      working-directory: ${APP_DIR}
      run: |
        echo "==============================="
        export PATH=~/tools/appimage/usr/bin:$PATH
        export LD_LIBRARY_PATH=~/tools/appimage/usr/lib
        echo "= Create symlinks ============="
        ln -sf usr/bin/flacon AppRun
        ln -sf usr/share/icons/hicolor/128x128/apps/flacon.png .
        ln -sf usr/share/applications/flacon.desktop .
        echo "= Add programs ================"
        for prog in ${PROGRAMS}; do echo " * Copy ${prog}"; src=$(which "$prog"); dest=${src#/}; cp -f "${src}" "usr/bin/"; done
        echo "= Build image ================="
        linuxdeploy --verbosity=3  --plugin qt --appdir "${APP_DIR}"




    #     sudo apt-get -y install software-properties-common
    #     sudo add-apt-repository -y ppa:flacon
    #     sudo apt-get -y update
    #     sudo apt-get -y install build-essential pkg-config cmake  qtbase5-dev qttools5-dev-tools qttools5-dev libuchardet-dev libtag1-dev
    #     sudo apt-get -y install flac mac alacenc vorbis-tools wavpack lame ttaenc faac opus-tools sox

    # - name: Clone tools
    #   run: |
    #     git clone --depth 1 https://github.com/SokoloffA/nightly-tools.git ~/tools
    #     echo PATH=~/tools/appimage/usr/bin:$PATH >> $GITHUB_ENV
    #     echo LD_LIBRARY_PATH=~/tools/appimage/usr/lib >> $GITHUB_ENV

    # - name: Create Build Environment
    #   run: |
    #     cmake -E make_directory ${{github.workspace}}/build
    #     cmake -E make_directory ${{github.workspace}}/build/app

    # - name: Run CMake
    #   shell: bash
    #   working-directory: ${{github.workspace}}/build
    #   run: cmake -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/app/usr -DAPPIMAGE_BUNDLE=Yes -DCMAKE_BUILD_TYPE=$BUILD_TYPE $GITHUB_WORKSPACE

    # - name: Build Flacon
    #   working-directory: ${{github.workspace}}/build
    #   shell: bash
    #   run: make -j 8

    # - name: Install Flacon
    #   working-directory: ${{github.workspace}}/build
    #   shell: bash
    #   run: make install

    # - name: Build AppImage dir
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     echo "==============================="
    #     export PATH=~/tools/appimage/usr/bin:$PATH
    #     export LD_LIBRARY_PATH=~/tools/appimage/usr/lib
    #     echo "= Create symlinks ============="
    #     ln -sf usr/bin/flacon AppRun
    #     ln -sf usr/share/icons/hicolor/128x128/apps/flacon.png .
    #     ln -sf usr/share/applications/flacon.desktop .
    #     echo "= Add programs ================"
    #     for prog in ${PROGRAMS}; do echo " * Copy ${prog}"; src=$(which "$prog"); dest=${src#/}; cp -f "${src}" "usr/bin/"; done
    #     echo "= Build image ================="
    #     linuxdeploy --verbosity=3  --plugin qt --appdir "${{github.workspace}}/build/app"

    # - name: Check external programs
    #   working-directory: ${{github.workspace}}
    #   run: |
    #     scripts/check-extprograms.sh . ${{github.workspace}}/build/app/usr/bin

    # - name: Build AppImage file
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     appimagetool "${{github.workspace}}/build/app" "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"


    # - name: Upload artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.APPIMAGE_NAME }}
    #     path: "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"
